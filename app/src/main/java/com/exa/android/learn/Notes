View Binding =>
View binding is a feature that makes it easier to write code that interacts with views.
Once view binding is enabled in a module, it generates a binding class for each XML layout
file present in that module. An instance of a binding class contains direct references to all
views that have an ID in the corresponding layout.

In most cases, view binding replaces findViewById.
Three reason to use view binding -
1.No overhead of writing boiler code 'findViewById<T>(R.id.T)'
2.No need to define type as it has already defined as well as we can't use btn as text and vice-versa for all.
3.No need to worry for null type, ie it can be accessed only when we have that name id.

To do this follow given steps:

1. In dependecies
buildFeautres{
 viewBinding = true
}

2. Intialise object :
the class created is on the name of resource file like for activity_main, Binding class - ActivityMainBinding
(i). for Activity it is followed :
lateinit var binding = ActivityMainBinding
override fun onCreate{
  binding = ActivityMainBinding.inflate(layoutInflater)
  val view = binding.root
  setContextView(view)
}

(ii). for Fragment :
 we create two variable _binding ie original object which of nullable type then required
 '?.' each time whenever we use _binding to access view id.
 To overcome we create another variable binding = _binding !! used non-null asserted.

 Code:
 var _binding : FragmentNameBinding ? = null
 val binding get() = _binding
 override fun onCreateView(
     inflater: LayoutInflater,
     container: ViewGroup?,
     savedInstanceState: Bundle?
 ): View? {
     _binding = ResultProfileBinding.inflate(inflater, container, false)
     val view = binding.root

--------------------------------***--------------------------***-----------------------------
Fetching Image Via Api =>
Three ways :
1.Glide: Great for a wide range of use cases and has robust support
 for various image transformations and caching.

 Dependency for glide :
 implementation 'com.github.bumptech.glide:glide:4.12.0'
 annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

 Implement :
 Glide.load(image url).into(image id)

 In recycle view :
  Glide.with(holder.itemView.context)
             .load(image.imageUrl)
             .into(holder.imageView)

2. Picasso :  Simple to use and good for basic image loading tasks.

Dependencies :  implementation 'com.squareup.picasso:picasso:2.71828'

Implement :
 val imageView = findViewById<ImageView>(R.id.imageView)
        val imageUrl = "https://example.com/image.jpg"

        Picasso.get()
            .load(imageUrl)
            .into(imageView)

3. Coil : Coil: Optimized for Kotlin and coroutines,
 with modern features and good performance.
 Coil to load images from URLs into ImageViews.
 Coil is designed for Kotlin and has coroutine support.

 Dependencies :  implementation("io.coil-kt:coil:2.0.0")

 Implementation:
 holder.img.load(data[position].image)

----------------------------------***--------------------------***-----------------------------
Recycle View => It is similar to listview but with some advancement. It is preffered mainly
when a large data set is to represent because of its way of recycling views.
As we seen in list view it creates always new view for each position but in recycle view
it only creates the specific view as per screen size and then use that view again and again
to show data for each position. This all is managed through its layout manager.
It is of three types -
1. List view layout manager = for linear view basically to set code is :
   recycleView.layoutManager = LinearLayoutManager(this)

2. Grid Layout Manager = for grid view where the size of each item of each row is almost same
   recycleView.layoutManager = GridLayoutManager(this,no_of_columns)

3. StaggeredGridLayoutManager = in Android's RecyclerView is used to create a staggered grid
layout where items can have varying sizes, and it provides a more dynamic and engaging visual presentation.
recycleview.layoutManager = StaggeredLayoutManager(span count, orientation)

The StaggeredGridLayoutManager constructor takes two primary parameters:

spanCount: The number of columns (for vertical orientation) or rows (for horizontal orientation) in the grid.
orientation: The layout orientation, which can be either StaggeredGridLayoutManager.VERTICAL or StaggeredGridLayoutManager.HORIZONTAL.
Example Usage
Hereâ€™s a brief example of how to set up a RecyclerView with a StaggeredGridLayoutManager:

Setting up StaggeredGridLayoutManager
kotlin
Copy code
val recyclerView = findViewById<RecyclerView>(R.id.recyclerView)
val spanCount = 2 // Number of columns
val orientation = StaggeredGridLayoutManager.VERTICAL // Vertical orientation
val layoutManager = StaggeredGridLayoutManager(spanCount, orientation)
recyclerView.layoutManager = layoutManager

Detailed Explanation

spanCount: This parameter determines the number of spans (columns in vertical
orientation or rows in horizontal orientation) in the grid. For example, if
spanCount is set to 2 and the orientation is vertical, there will be two columns
in the grid.

orientation: This parameter sets the layout orientation. It can be one of the following:

StaggeredGridLayoutManager.VERTICAL: Items are laid out in columns.
StaggeredGridLayoutManager.HORIZONTAL: Items are laid out in rows.

Recycle View Adapter => It is used to set view and recycle views it is needed
to be implementated to use recycle view. It implements RecycleView.Adapter
that takes as generic parameters of your <Adapter,class>().
Three methods are implemented

A class extends from RecycleView.class name used to find items via findViewById and bind data form array of current position
using bind fun defined in class let say ViewHolder.It accepts a inflate view as param

1. OnCreateViewHolder - It inflate view from parent(layout on which items appear),
resource(item layout ie the way in which items appear on parent) and return it as ViewHolder class constructor.

2. OnBindViewHolder - It's parameters are ViewHolder class object and position/index of array for current view
and call bind fun via ViewHolder obj and sends position as param.
Another way to bind data is to set data in this fun only without calling bind fun by directly accessing the
views extracted in ViewHolder class through its object.

3. getItemCount - return the no. of items we need to represent ie return the size of array

code : class RecycleAdapter(var data: List<UserX>) : RecyclerView.Adapter<RecycleAdapter.ViewHolder>() {

           override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecycleAdapter.ViewHolder {
             val view = LayoutInflater.from(parent.context).inflate(R.layout.list_item,parent,false)
               return ViewHolder(view)
           }

           override fun onBindViewHolder(holder: RecycleAdapter.ViewHolder, position: Int) {
               val user_name = data[position].firstName + data[position].lastName
               holder.name.text = user_name

               holder.des.text = (data[position].address).toString()

               holder.img.load(data[position].image)

               instead of binding here directly we use to call bind function
               bind(positon)
           }

           override fun getItemCount(): Int {
               return data.size
           }

           inner class ViewHolder(val itemView : View, listner: onItemClickListner) : RecyclerView.ViewHolder(itemView){
               val name = itemView.findViewById<TextView>(R.id.name)
               val des  = itemView.findViewById<TextView>(R.id.des)
               val img = itemView.findViewById<ImageView>(R.id.image)
           }
           // Another method for binding data
           fun bind(position : Int){
               name.text = data[position].firstName
               and same as for all views
           }
         }

 Handeling click on recycle view =>

 When we click on we need to perform some task may be we need curr position data also so we setOnclick on view in
 the ViewHolder class because where we pass a view inflated from onCreate method and return in interface fun. Because
 in main activity when we want to acces cur view and its corresponding info. of data arr we call a fun that has cur view
 interface obj and within its fun the cur adapter pos. now do what you want

 // Classical method as used in jave too
 1. Create a interface inside Adapter Class and create a fun that accepts an Int param.
 2. Create fun whose param is an object of given interface that intialize mylistner inside it. It is send
 as param in ViewHolder class.
 3. In ViewHolder Class using mylistner we implement fun of interface and pass cur adapter position as param.
 This should be invoked in init block. and apply setOnclickListner on view
  eg - class RecycleAdapter(var data: List<UserX>) : RecyclerView.Adapter<RecycleAdapter.ViewHolder>() {

           lateinit var myListner : onItemClickListner

           interface onItemClickListner{
               fun onItemClick(d : List<UserX>, position: Int)
           }

           fun onRecycleViewClick(listner : onItemClickListner){
               myListner = listner
           }

           override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecycleAdapter.ViewHolder {
             val view = LayoutInflater.from(parent.context).inflate(R.layout.list_item,parent,false)
               return ViewHolder(view, myListner)
           }

           override fun onBindViewHolder(holder: RecycleAdapter.ViewHolder, position: Int) {
               val user_name = data[position].firstName + data[position].lastName
               holder.name.text = user_name

               holder.des.text = (data[position].address).toString()

               holder.img.load(data[position].image)
           }

           override fun getItemCount(): Int {
               return data.size
           }

           inner class ViewHolder(val itemView : View, listner: onItemClickListner) : RecyclerView.ViewHolder(itemView){
               val name = itemView.findViewById<TextView>(R.id.name)
               val des  = itemView.findViewById<TextView>(R.id.des)
               val img = itemView.findViewById<ImageView>(R.id.image)

               init {
                   itemView.setOnClickListener {
                       listner.onItemClick(data , adapterPosition)
                   }
               }
           }

           here we are needing data also so we create two attributses as list and position

           now in Main Activity :
           userAdapter.onRecycleViewClick(object : RecycleAdapter.onItemClickListner {
                           override fun onItemClick(data : List<UserX>,position: Int) {
                              val intent = Intent(this@MainActivity, MainActivity2::class.java)
                               intent.putExtra("image_res", data[position].image)
                              startActivity(intent)
                           }
                       })

// Using kotlin lan in which the fun is also treated as value that is as we treat int and object same  we can
do with function, we can store it in variable send it as a param so here instead of creating a interface we use
the function for calling basically we need current click on view we desire so we use on click in init block and data
to perform some action so we create

1. a fuc that accepts curr data & position. Or whatever we desire
2. Send it in constuctor of Adapter like - ::funName
3. apply on click as previous and call created fun
4. a created fun is called now do above process


like -  recylcleview.adapter = RecycleAdapter(data,::showTab)

in RecyleAdapter -

class RecycleAdapter(var data: List<UserX>,private val showTab : (list,int)->data tyep :
RecyclerView.Adapter<RecycleAdapter.ViewHolder>() {

now in init block {
   item.setOnclickListener{
       showTab(data,adapterPosition)
   }
}

//Now fun

fun showTab(data : list, positin :Int){
  TODO ;
}


--------------------------------***--------------------------***-----------------------------------***--------------
-------------------------------------------------------------  *** Gson *** ------------------------------------------------------------------------
refer: - https://futurestud.io/tutorials/gson-builder-basics-naming-policies




------------------------------------------------------------  *** Retrofit *** ----------------------------------------------------------------------

* Reference :- https://futurestud.io/tutorials/retrofit-2-basics-of-api-description

* API Endpoints :- It is a URL use to access data from API. When you want to interact with the API, you "order" a specific service or data by accessing the corresponding endpoint. you tell the API
       which endpoint you want to access by sending a request to its specific URL.
       Imagine an API like a menu at a restaurant. Each item on the menu represents a different dish you can order. Similarly, each API endpoint is like an item on the menu, representing a different
       service or piece of data that the API can provide.
       By accessing these endpoints with appropriate HTTP requests (such as GET, POST, PUT, DELETE), developers can integrate the APIs functionality into their applications.

* Retrofit is a open source library, use for making HTTP requests to web services and APIs. Retrofit serves as an HTTP client for making network requests from your Android app.
       Retrofit integrates with other libraries like Gson or Jackson for serialization and deserialization of JSON data.


*** Retrofit is implemented similar to room database , where entity class is replaced by data class, DAO is replaced by API interface and database class is replaced by Build Retrofit Object.
    To implement retrofit : 1. data class ,   2. API Interface   and     3. Retrofit Object.

step - 1 : data class can be generated by any plugin like: "JSON to Kotlin class".
step-2 : make a interface "QuoteAPI". Define methods which will return the "Response" object. Response is a generic class provided by Retrofit to encapsulate an HTTP response. It is used to wrap the
         HTTP response received from the server. Each method in the interface represents a specific API endpoint, with annotations provided by Retrofit to specify details like the URL path,
         query parameters, request body, etc. Every method must have an HTTP annotation that provides the request method and relative URL. There are eight built-in annotations: HTTP, GET, POST,
         PUT, PATCH, DELETE, OPTIONS and HEAD. The relative URL of the resource (endpoint) is specified in the annotation. eg. @GET("users/list")

         annotations are :
         1. @Query: when you want to add query parameters to your URL. Query parameters are appended to the URL with a '?' separator. For ex, if you have an endpoint like '/search' and parameters
         like "query" and "page", you would use @Query for each parameter:
         @GET("/search")
         suspend fun search(@Query("query") query: String, @Query("page") page: Int): Response

         2. @Path: when you want to substitute parts of the URL path with dynamic values. For ex, if you have an endpoint like "/users/{id}" where {id} is a dynamic value representing a user's ID,
         use @Path to specify the ID:
         @GET("/users/{id}")
         suspend fun getUser(@Path("id") userId: String): Response<User>.
         The value passed to @Path will be substituted into the URL at runtime.

         3. @QueryMap: when you want to pass multiple query parameters as a map, when the number of query parameters is not known beforehand or when you want to pass a dynamic set of parameters.
         For example: @GET("/search")
                     suspend fun search(@QueryMap options: Map<String, String>): Response<List<Result>>.


 step-3 : To create a network requests to a REST API with Retrofit, we need to create an instance using the " Retrofit.Builder " class and configure it with a base URL. When you instantiate Retrofit,
         you're creating an instance of this class, which acts as a client for making API calls.

         *** Retrofit.Builder :-
          * Initialisation : val builder = Retrofit.Builder()
          * set base URL for API endpoints using baseURL() :  builder.baseUrl("https://api.example.com/");
          * Retrofit needs a converter factory to serialize and deserialize HTTP request and response bodies. You can add a converter factory using the addConverterFactory() method:
            builder.addConverterFactory(GsonConverterFactory.create());                   //Retrofit provides GsonConverterFactory.
          * we can customize retrofit feature by adding other options such as call adapters, HTTP client, etc. " client(client: OkHttpClient) ": Sets the HTTP client to be used for making HTTP requests.
            Retrofit typically uses OkHttp as its default HTTP client, but you can provide a custom OkHttpClient instance if needed. ex.- "OkHttpClient" is a popular HTTP client library .
                  val httpClient = OkHttpClient.Builder().build()               // make a instance of OKHttpClient.
                  builder.client(httpClient)
          * After configuring Retrofit with the desired options, you call the build() method to create the final Retrofit instance: val retrofit = builder.build()

          ex. -
          val retrofit = Retrofit.Builder()
              .baseUrl("https://api.example.com/")                                     // add BaseUrl.
              .addConverterFactory(GsonConverterFactory.create())                     // add gson converter factory.
              .build()                                                               // Create Retrofit instance


         Now at this stage we have a instance of retrofit.

 step -4 : Final step- Inside the onCreate() method of the MainActivity.java, we initialise an instance of the RetrofitClient using " retrofit.create(ApiService::class.java) ". It is used to create
         instances of API service interfaces. This method is crucial for transforming your API interface into a callable object that can be used to make network requests. It takes the interface
         class as its argument and returns an instance of that interface.
         eg.- val apiService = retrofit.create(ApiService::class.java)
         .create(DataApi::class.java)  // or .create<DataApi>()                // Interface is set

         Now make network request by calling the methods defined in API interface (step-2) to to fetch a data with the specified parameter. Retrofit handles the HTTP communication, and the response
         is automatically serialized into object based on the JSON structure returned by the server.
         ex. -
         interface ApiService {
             @GET("/posts/{id}")
             suspend fun getPostById(@Path("id") postId: Int): Post
         }
         val post = apiService.getPostById(1)                  // it return response, getPostById() is defined in API interface.

          When the HTTP request is complete, Retrofit receives the response from the server. The response is encapsulated in a Response object, which contains information such as the HTTP status code,
          response headers, and the response body. Method use to access response data are:
          1. body(): This method returns the deserialized response body. It extracts the response body from the Response object and automatically converts it into the specified type using the
                     configured converter factories.
                     eg.- val result = response.body()

          2. headers(): This method returns the response headers as an instance of Headers. You can use methods like get(), size(), and names() on the Headers object to access individual headers.
                     eg.-  Headers headers = response.headers();
                           String contentType = headers.get("Content-Type");

          3. errorBody(): This method returns the error response body if the HTTP request was not successful (i.e., if the status code is not in the range 200-299). It returns null if the request
                     was successful.
                     eg.- if (!response.isSuccessful()) {
                              // Handle error response
                              ResponseBody errorBody = response.errorBody();
                              // Process the error body, if needed
                          }

          and many more.

         we call these response method in coroutine, to avoid main thread block.



         -------------------------------------------------------------------------*** Call Object ***--------------------------------------------------------------------
         If you want to make synchronous requests and handle the response directly within the calling thread, you should use Response in API interface. Synchronous requests are suitable for
         background tasks or situations where you want to block the current thread until the request completes.
         But, Asynchronous requests are often preferred in Android applications to prevent blocking the main UI thread. We do this using "Call" instead of Response. It is used in long-running apps.
         When you make an asynchronous request using Retrofit, you provide a callback object that Retrofit invokes when the request completes or encounters an error. This mechanism provides a way
         to execute code asynchronously in response to network operations.

         Retrofit defines a Callback<T> interface for handling asynchronous responses.  This interface contains two methods: onResponse() and onFailure().
         * onResponse():This method is called when the HTTP request is successful and a response is received from the server. It passes the response object containing the deserialized response body.

         * onFailure(): This method is called when the HTTP request fails, either due to a network error, server error, or other reasons. It passes an instance of Throwable representing the error.

         To handle asynchronous responses, you implement the Callback<T> interface and override its methods to define your response handling logic.
         Implementation of Call :-
         1. data class is same as response.
         2. we use Call instead of Response in API interface.
         eg.-  interface GitHubClient {
                   @GET("/users/{user}/repos")
                   fun reposForUser( @Path("user") user: String ): Call<List<GitHubRepo>>
               }

         3. same as response.
         4. In mainActivity, create instance of RetrofitClient or API interface similar to response which is used to make network call. And then call the method defined in interface for network connection.
            val service = RetrofitClientInstance.getRetrofitInstance().create(GetDataService.class)
            val call: Call<List<GitHubRepo>> = service.getAllPhotos()
         Now Implement the Callback<T> interface and override its methods to define your response handling logic:
         eg.-       call.enqueue(object : Callback<List<GitHubRepo>> {
                         override fun onResponse(call: Call<List<GitHubRepo>>, response: Response<List<GitHubRepo>>) {
                             if (response.isSuccessful) {
                                 val post = response.body()
                                 // Handle the retrieved post data
                             } else {
                                 // Handle error
                             }
                         }

                         override fun onFailure(call: Call<List<GitHubRepo>>, t: Throwable) {
                             // Handle failure
                         }
                     })




         Reference : https://medium.com/@imkuldeepsinghrai/api-calls-with-retrofit-in-android-kotlin-a-comprehensive-guide-e049e19deba9